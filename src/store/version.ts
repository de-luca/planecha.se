import { Exported, Patch } from '@/model/map';
import { Delta, patch } from '@n1ru4l/json-patch-plus';
import { defineStore } from 'pinia';

type State = {
  head?: Exported;
  patches: Array<Patch>;
};

function getState(): State {
  return {
    patches: [],
  };
}

export const useVersion = defineStore('version', {
  state: getState,

  getters: {
    lastPatch(): Patch {
      return this.patches.at(-1) as Patch;
    },
    lastPlayHead(): number | undefined {
      return this.patches.at(-1)?.playHead;
    },
    nextPlayHead(): number {
      return (this.lastPlayHead ?? -1) + 1;
    },
  },

  actions: {
    /**
     * Update the current state of the Map
     */
    setHead(exported: Exported): void {
      this.head = exported;
    },

    /**
     * Add a patch that was generated by direct action
     */
    pushPatch(patch: Patch): void {
      this.patches.push(patch);
    },

    /**
     * Add a patch that was applied through sync
     */
    applyPatch(patch: Patch): void {
      this.patches.push(patch);
    },

    /**
     * Get the Map at a specific playHead index
     */
    checkout(playHead: number): Exported {
      let base = {};
      let i = 0;

      while (this.$state.patches[i].playHead < playHead) {
        if (this.$state.patches[i].delta) {
          base = patch({
            left: base,
            delta: this.$state.patches[i].delta as Delta,
          });
        }
      }

      return base as Exported;
    },
  },
});
